import torch


class Stage1(torch.nn.Module):
    def __init__(self):
        super(Stage1, self).__init__()
        self.layer53 = torch.nn.ReLU()
        self.layer54 = torch.nn.EmbeddingBag(93145, 16, mode="sum", sparse=True)
        self.layer55 = torch.nn.EmbeddingBag(8351593, 16, mode="sum", sparse=True)
        self.layer56 = torch.nn.EmbeddingBag(7046547, 16, mode="sum", sparse=True)
        self.layer57 = torch.nn.EmbeddingBag(633, 16, mode="sum", sparse=True)
        self.layer58 = torch.nn.EmbeddingBag(583, 16, mode="sum", sparse=True)
        self.layer59 = torch.nn.EmbeddingBag(5683, 16, mode="sum", sparse=True)
        self.layer60 = torch.nn.EmbeddingBag(5652, 16, mode="sum", sparse=True)
        self.layer61 = torch.nn.EmbeddingBag(5461306, 16, mode="sum", sparse=True)
        self.layer62 = torch.nn.EmbeddingBag(4, 16, mode="sum", sparse=True)
        self.layer63 = torch.nn.EmbeddingBag(3194, 16, mode="sum", sparse=True)
        self.layer64 = torch.nn.EmbeddingBag(305, 16, mode="sum", sparse=True)
        self.layer65 = torch.nn.EmbeddingBag(3, 16, mode="sum", sparse=True)
        self.layer66 = torch.nn.EmbeddingBag(286181, 16, mode="sum", sparse=True)
        self.layer67 = torch.nn.EmbeddingBag(27, 16, mode="sum", sparse=True)
        self.layer68 = torch.nn.EmbeddingBag(24, 16, mode="sum", sparse=True)
        self.layer69 = torch.nn.EmbeddingBag(2202608, 16, mode="sum", sparse=True)
        self.layer70 = torch.nn.EmbeddingBag(2173, 16, mode="sum", sparse=True)
        self.layer71 = torch.nn.EmbeddingBag(18, 16, mode="sum", sparse=True)
        self.layer72 = torch.nn.EmbeddingBag(15, 16, mode="sum", sparse=True)
        self.layer73 = torch.nn.EmbeddingBag(14992, 16, mode="sum", sparse=True)
        self.layer74 = torch.nn.EmbeddingBag(1460, 16, mode="sum", sparse=True)
        self.layer75 = torch.nn.EmbeddingBag(142572, 16, mode="sum", sparse=True)
        self.layer76 = torch.nn.EmbeddingBag(12517, 16, mode="sum", sparse=True)
        self.layer77 = torch.nn.EmbeddingBag(105, 16, mode="sum", sparse=True)
        self.layer78 = torch.nn.EmbeddingBag(10131227, 16, mode="sum", sparse=True)
        self.layer79 = torch.nn.EmbeddingBag(10, 16, mode="sum", sparse=True)
        self._initialize_weights()

    

    def forward(self, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input0, input48, input49, input50, input51, input52):
        out0 = input0.clone()
        out1 = input1.clone()
        out2 = input2.clone()
        out3 = input3.clone()
        out4 = input4.clone()
        out5 = input5.clone()
        out6 = input6.clone()
        out7 = input7.clone()
        out8 = input8.clone()
        out9 = input9.clone()
        out10 = input10.clone()
        out11 = input11.clone()
        out12 = input12.clone()
        out13 = input13.clone()
        out14 = input14.clone()
        out15 = input15.clone()
        out16 = input16.clone()
        out17 = input17.clone()
        out18 = input18.clone()
        out19 = input19.clone()
        out20 = input20.clone()
        out21 = input21.clone()
        out22 = input22.clone()
        out23 = input23.clone()
        out24 = input24.clone()
        out25 = input25.clone()
        out26 = input26.clone()
        out27 = input27.clone()
        out28 = input28.clone()
        out29 = input29.clone()
        out30 = input30.clone()
        out31 = input31.clone()
        out32 = input32.clone()
        out33 = input33.clone()
        out34 = input34.clone()
        out35 = input35.clone()
        out36 = input36.clone()
        out37 = input37.clone()
        out38 = input38.clone()
        out39 = input39.clone()
        out40 = input40.clone()
        out41 = input41.clone()
        out42 = input42.clone()
        out43 = input43.clone()
        out44 = input44.clone()
        out45 = input45.clone()
        out46 = input46.clone()
        out47 = input47.clone()
        out48 = input48.clone()
        out49 = input49.clone()
        out50 = input50.clone()
        out51 = input51.clone()
        out52 = input52.clone()
        out53 = self.layer53(out0)
        out54 = self.layer54(out19, out20)
        out55 = self.layer55(out23, out24)
        out56 = self.layer56(out41, out42)
        out57 = self.layer57(out15, out16)
        out58 = self.layer58(out3, out4)
        out59 = self.layer59(out21, out22)
        out60 = self.layer60(out35, out36)
        out61 = self.layer61(out31, out32)
        out62 = self.layer62(out39, out40)
        out63 = self.layer63(out25, out26)
        out64 = self.layer64(out9, out10)
        out65 = self.layer65(out17, out18)
        out66 = self.layer66(out47, out48)
        out67 = self.layer67(out27, out28)
        out68 = self.layer68(out11, out12)
        out69 = self.layer69(out7, out8)
        out70 = self.layer70(out37, out38)
        out71 = self.layer71(out43, out44)
        out72 = self.layer72(out45, out46)
        out73 = self.layer73(out29, out30)
        out74 = self.layer74(out1, out2)
        out75 = self.layer75(out51, out52)
        out76 = self.layer76(out13, out14)
        out77 = self.layer77(out49, out50)
        out78 = self.layer78(out5, out6)
        out79 = self.layer79(out33, out34)
        out80 = torch.cat([out53, out74, out58, out78, out69, out64, out68, out76, out57, out65, out54, out59, out55, out63, out67, out73, out61, out79, out60, out70, out62, out56, out71, out72, out66, out77, out75], 1)
        (batch_size, d) = out53.shape
        
        out81 = out80.view((batch_size, -1, d))
        out82 = out81.transpose(1, 2)
        out83 = torch.bmm(out81, out82)
        
        _, ni, nj = out83.shape
        offset = 0
        li = torch.tensor([i for i in range(ni) for j in range(i + offset)])
        lj = torch.tensor([j for i in range(nj) for j in range(i + offset)])
     
        out84 = out83[:, li, lj]
        out85 = torch.cat([out53, out84], 1)
        return out85

    def _initialize_weights(self):
        import numpy as np
        for module in self.modules():
            if isinstance(module, torch.nn.Linear):
                mean = 0.0  # std_dev = np.sqrt(variance)
                n, m = module.in_features, module.out_features
                std_dev = np.sqrt(2 / (m + n))  # np.sqrt(1 / m) # np.sqrt(1 / n)
                W = np.random.normal(mean, std_dev, size=(m, n)).astype(np.float32)
                std_dev = np.sqrt(1 / m)  # np.sqrt(2 / (m + 1))
                bt = np.random.normal(mean, std_dev, size=m).astype(np.float32)
                # approach 1
                module.weight.data = torch.tensor(W, requires_grad=True)
                module.bias.data = torch.tensor(bt, requires_grad=True)
            elif isinstance(module, torch.nn.EmbeddingBag):
                n, m = module.num_embeddings, module.embedding_dim
                W = np.random.uniform(
                    low=-np.sqrt(1 / n), high=np.sqrt(1 / n), size=(n, m)
                ).astype(np.float32)
                # approach 1
                module.weight.data = torch.tensor(W, requires_grad=True)
       